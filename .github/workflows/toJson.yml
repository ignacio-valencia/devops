
name: toJson vars

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment variable source'
        type: environment
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    environment: ${{ github.event.inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create file with GitHub context
        run: echo '${{ toJSON(github) }}' > github-context.json

      - name: Print GitHub context from file
        run: cat github-context.json

      - name: Create file with GitHub context
        run: echo '${{ toJSON(secrets) }}' > github-secrets.json

      - name: Print GitHub context from file
        run: cat github-secrets.json

      - name: Update JSON
        run: |
          # Contenido de origen JSON desde la variable de GitHub
          contenido_origen="${{ toJSON(github) }}"
              
          # Ruta del archivo de destino
          archivo_destino=".github/aws/sm-schema.json"
              
          # Nombre del archivo resultante
          archivo_resultante="resultado.json"
              
          # Crear un objeto JSON vacÃ­o para el resultado
          resultado="{}"
              
          # Obtener las claves del contenido de origen
          claves_origen=$(echo "$contenido_origen" | jq -r 'keys[]')
              
          # Iterar sobre las claves del contenido de origen
          for clave in $claves_origen; do
            # Verificar si la clave existe en el archivo de destino
            if jq -e ".${clave}" "$archivo_destino" > /dev/null; then
              # Si existe, obtener el valor del contenido de origen
              valor_origen=$(echo "$contenido_origen" | jq -r ".$clave")
              # Agregar la clave y el valor al resultado
              resultado=$(echo "$resultado" | jq --arg clave "$clave" --arg valor "$valor_origen" '. + {($clave): $valor}')
            fi
          done
              
          # Guardar el resultado en un nuevo archivo
          echo "$resultado" > "$archivo_resultante"
              
          echo "Archivo resultante:"
          cat "$archivo_resultante"



