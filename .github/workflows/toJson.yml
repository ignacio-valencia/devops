
name: toJson vars

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment variable source'
        type: environment
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    environment: ${{ github.event.inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create file with GitHub context
        run: echo '${{ toJSON(github) }}' > github-context.json

      - name: Print GitHub context from file
        run: cat github-context.json

      - name: Create file with GitHub context
        run: echo '${{ toJSON(secrets) }}' > github-secrets.json

      - name: Print GitHub context from file
        run: cat github-secrets.json

      - name: Update JSON
        run: |
          # Ruta al archivo de destino en el repositorio
          archivo_destino=".github/aws/sm-schema.json"

          # Extraer las claves y valores del objeto JSON de GitHub
          claves_destino=$(jq -r 'keys[]' "$archivo_destino" | tr ' ' '\n')
          contenido_origen='${{ toJSON(secrets) }}'

          echo ORGINE:$contenido_origen

          # Crear un objeto JSON vacío para el resultado
          resultado="{}"

          echo DESINO:$claves_destino

          # Iterar sobre las claves del archivo de destino línea por línea
            echo "$claves_destino" | while IFS= read -r clave; do
                echo CLAVE: "$clave"

                # Obtener el valor correspondiente del contenido de origen
                valor_origen=$(echo "$contenido_origen" | jq -r ".$clave")

                # Agregar la clave y el valor al resultado
                resultado=$(jq --arg clave "$clave" --arg valor "$valor_origen" '. + {($clave): $valor}' <<< "$resultado")

            done

          # Guardar el resultado en el archivo de destino
          echo $resultado


