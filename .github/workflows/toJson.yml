
name: toJson vars

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment variable source'
        type: environment
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    environment: ${{ github.event.inputs.environment }}
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Create file with GitHub context
        run: echo '${{ toJSON(github) }}' > github-context.json

      - name: Print GitHub context from file
        run: cat github-context.json

      - name: Create file with GitHub context
        run: echo '${{ toJSON(secrets) }}' > github-secrets.json

      - name: Print GitHub context from file
        run: cat github-secrets.json

      - name: Update JSON
        run: |
          # Contenido de origen JSON desde la variable de GitHub
          contenido_origen="${{ toJSON(github) }}"
          
          # Ruta del archivo de destino
          archivo_destino=".github/aws/sm-schema.json"
          
          # Nombre del archivo resultante
          archivo_resultante="resultado.json"
          
          # Obtener las claves comunes entre origen y destino
          claves_comunes=$(jq -n --argjson origen "$contenido_origen" --arg destino "$archivo_destino" '
              ($origen | keys_unsorted[]) as $k
              | select($k == ($destino | keys_unsorted[]))
              | $k
              ' | jq -s '.'
          )
          
          # Usar jq para combinar los datos de origen y destino utilizando las claves comunes
          jq -n --argjson origen "$contenido_origen" --arg destino "$archivo_destino" --argjson claves "$claves_comunes" '
              $origen * ($destino | with_entries(select(.key as $k | $claves | index($k))))
              ' > "$archivo_resultante"
          
          echo "Archivo resultante:"
          cat "$archivo_resultante"



